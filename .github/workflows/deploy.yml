name: üöÄ Deploy to Production

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # Build and Push Docker Image
  # ============================================
  build:
    name: üèóÔ∏è Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üêã Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: ‚úÖ Build complete
        run: |
          echo "‚úÖ Docker image built and pushed successfully!"
          echo "üì¶ Image: ${{ steps.meta.outputs.tags }}"

  # ============================================
  # Deploy to Server
  # ============================================
  deploy:
    name: üöÄ Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: ${{ inputs.environment || 'production' }}
      url: https://auth.uzswlu.uz

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY || secrets.SSH_PRIVATE_KEY }}
      
      - name: üìã Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_HOST || secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      
      - name: üì¶ Create deployment package
        run: |
          tar czf deploy-package.tar.gz \
            docker-compose.prod.yml \
            deploy.sh \
            nginx/ \
            .env.example
      
      - name: üì§ Copy files to server
        run: |
          scp deploy-package.tar.gz ${{ secrets.PROD_USER || secrets.SERVER_USER }}@${{ secrets.PROD_HOST || secrets.SERVER_HOST }}:/tmp/
      
      - name: üöÄ Deploy on server
        run: |
          ssh ${{ secrets.PROD_USER || secrets.SERVER_USER }}@${{ secrets.PROD_HOST || secrets.SERVER_HOST }} << 'ENDSSH'
            set -e
            
            # Colors
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            RED='\033[0;31m'
            NC='\033[0m'
            
            echo -e "${YELLOW}üöÄ Starting deployment...${NC}"
            
            # Navigate to app directory
            cd /var/www/auth-api || cd /opt/management-api
            
            # Extract deployment package
            tar xzf /tmp/deploy-package.tar.gz -C . 2>/dev/null || echo "Using existing files"
            
            # Load environment variables
            if [ -f .env.production ]; then
              export $(cat .env.production | grep -v '^#' | xargs)
            elif [ -f .env ]; then
              export $(cat .env | grep -v '^#' | xargs)
            fi
            
            # Set image tag and repository
            export IMAGE_TAG="${{ needs.build.outputs.version }}"
            export GITHUB_REPOSITORY="${{ github.repository }}"
            
            echo -e "${YELLOW}üì¶ Image: ghcr.io/${GITHUB_REPOSITORY}:${IMAGE_TAG}${NC}"
            
            # Login to GitHub Container Registry
            GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"
            if [ -z "$GHCR_TOKEN" ]; then
              GHCR_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            fi
            echo "$GHCR_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            echo -e "${YELLOW}üì• Pulling latest image...${NC}"
            docker pull ghcr.io/${GITHUB_REPOSITORY}:${IMAGE_TAG}
            
            # Stop old containers
            echo -e "${YELLOW}üõë Stopping old containers...${NC}"
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            
            # Start new containers
            echo -e "${YELLOW}üöÄ Starting new containers...${NC}"
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for health check
            echo -e "${YELLOW}‚è≥ Waiting for health check...${NC}"
            sleep 15
            
            # Check container status
            docker-compose -f docker-compose.prod.yml ps
            
            echo -e "${GREEN}‚úÖ Deployment completed!${NC}"
          ENDSSH

      - name: üß™ Health check
        run: |
          echo "‚è≥ Waiting for application to be ready..."
          sleep 15
          
          # Use APP_URL from secrets or default to auth.uzswlu.uz
          APP_URL="https://auth.uzswlu.uz"
          
          echo "üîç Checking health at: $APP_URL/health"
          response=$(curl -sk -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Application is healthy!"
          elif [ "$response" = "000" ]; then
            echo "‚ö†Ô∏è  Health check failed - checking via IP..."
            # Try direct server connection
            ssh ${{ secrets.PROD_USER || secrets.SERVER_USER }}@${{ secrets.PROD_HOST || secrets.SERVER_HOST }} \
              "docker-compose -f /var/www/auth-api/docker-compose.prod.yml ps"
          else
            echo "‚ö†Ô∏è  Health check returned HTTP $response"
          fi

      - name: üìä Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: üîî Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add your notification logic here (Slack, Discord, Email, etc.)

  # ============================================
  # Post-Deployment Tests (Optional)
  # ============================================
  test:
    name: üß™ Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üß™ Run smoke tests
        run: |
          echo "Running smoke tests..."
          
          # Default to auth.uzswlu.uz
          APP_URL="https://auth.uzswlu.uz"
          
          # Test API health endpoint
          echo "Testing: $APP_URL/health"
          response=$(curl -sk -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è  Health check: HTTP $response (normal if SSL not configured)"
          fi
          
          # Test Swagger documentation
          echo "Testing: $APP_URL/api"
          response=$(curl -sk -o /dev/null -w "%{http_code}" $APP_URL/api || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Swagger documentation accessible"
          else
            echo "‚ö†Ô∏è  Swagger: HTTP $response (normal if SSL not configured)"
          fi
          
          echo "‚úÖ Smoke tests completed!"
