name: Auto Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  validate:
    name: 🔍 Validate YAML
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 2

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate workflow files
        run: |
          echo "🔍 Validating YAML syntax..."
          for file in .github/workflows/*.yml; do
            echo "📝 Validating $file"
            python3 -c "import yaml; yaml.safe_load(open('$file')); print('✅ $file is valid')"
          done
          echo "✅ All YAML files are valid!"

  deploy:
    name: Deploy
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 5
    needs: validate
    # Run as root user to avoid permission issues
    steps:
      - name: 🔧 Setup GitHub Actions Runner as Root
        run: |
          echo "🔧 Setting up GitHub Actions Runner as root user..."

          # Stop existing runner service
          systemctl stop auth-api-runner.service 2>/dev/null || echo "Service not running"

          # Update service file to run as root
          echo "[Unit]" > /etc/systemd/system/auth-api-runner.service
          echo "Description=Auth API GitHub Actions Runner" >> /etc/systemd/system/auth-api-runner.service
          echo "After=network.target" >> /etc/systemd/system/auth-api-runner.service
          echo "" >> /etc/systemd/system/auth-api-runner.service
          echo "[Service]" >> /etc/systemd/system/auth-api-runner.service
          echo "Type=simple" >> /etc/systemd/system/auth-api-runner.service
          echo "User=root" >> /etc/systemd/system/auth-api-runner.service
          echo "WorkingDirectory=/var/www/auth-api/runner" >> /etc/systemd/system/auth-api-runner.service
          echo "ExecStart=/var/www/auth-api/runner/run.sh" >> /etc/systemd/system/auth-api-runner.service
          echo "Restart=always" >> /etc/systemd/system/auth-api-runner.service
          echo "RestartSec=5" >> /etc/systemd/system/auth-api-runner.service
          echo "" >> /etc/systemd/system/auth-api-runner.service
          echo "[Install]" >> /etc/systemd/system/auth-api-runner.service
          echo "WantedBy=multi-user.target" >> /etc/systemd/system/auth-api-runner.service

          # Reload and restart service
          systemctl daemon-reload
          systemctl enable auth-api-runner.service
          systemctl start auth-api-runner.service

          echo "✅ GitHub Actions Runner configured as root user"

      - name: Deploy
        timeout-minutes: 5
        run: |
          set -e
          cd /var/www/auth-api

          echo "📥 Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main

          # Set proper ownership and permissions
          echo "🔧 Setting proper ownership and permissions..."
          chown -R deploy:deploy .
          chmod -R 755 .
          git config --global --add safe.directory /var/www/auth-api

          echo "🔄 Redeploying with latest code..."
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache api
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --force-recreate

          echo "⏳ Waiting for containers..."
          sleep 10

          echo "✅ Deployed!"
          docker-compose -f docker-compose.prod.yml ps

          # Run universal server setup script
          echo "🚀 Running universal server setup..."

          # Create universal setup script
          echo "#!/bin/bash" > /tmp/universal-setup.sh
          echo "set -e" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "echo \"🚀 Universal Server Setup Script\"" >> /tmp/universal-setup.sh
          echo "echo \"=================================\"" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Colors for output" >> /tmp/universal-setup.sh
          echo "RED='\033[0;31m'" >> /tmp/universal-setup.sh
          echo "GREEN='\033[0;32m'" >> /tmp/universal-setup.sh
          echo "YELLOW='\033[1;33m'" >> /tmp/universal-setup.sh
          echo "BLUE='\033[0;34m'" >> /tmp/universal-setup.sh
          echo "NC='\033[0m'" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "print_status() { echo -e \"\${GREEN}✅ \$1\${NC}\"; }" >> /tmp/universal-setup.sh
          echo "print_warning() { echo -e \"\${YELLOW}⚠️ \$1\${NC}\"; }" >> /tmp/universal-setup.sh
          echo "print_error() { echo -e \"\${RED}❌ \$1\${NC}\"; }" >> /tmp/universal-setup.sh
          echo "print_info() { echo -e \"\${BLUE}ℹ️ \$1\${NC}\"; }" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Function to create nginx configuration" >> /tmp/universal-setup.sh
          echo "create_nginx_config() {" >> /tmp/universal-setup.sh
          echo "    local domain=\$1" >> /tmp/universal-setup.sh
          echo "    local port=\$2" >> /tmp/universal-setup.sh
          echo "    local ssl_enabled=\$3" >> /tmp/universal-setup.sh
          echo "    local config_file=\"/etc/nginx/sites-available/\$domain\"" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    print_info \"Creating Nginx configuration for \$domain...\"" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    # Remove old configuration if exists" >> /tmp/universal-setup.sh
          echo "    sudo rm -f \"/etc/nginx/sites-enabled/\$domain\"" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    # Create new configuration" >> /tmp/universal-setup.sh
          echo "    sudo tee \"\$config_file\" > /dev/null << EOF" >> /tmp/universal-setup.sh
          echo "server {" >> /tmp/universal-setup.sh
          echo "    listen 80;" >> /tmp/universal-setup.sh
          echo "    server_name \$domain;" >> /tmp/universal-setup.sh
          echo "EOF" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    if [ \"\$ssl_enabled\" = \"true\" ]; then" >> /tmp/universal-setup.sh
          echo "        sudo tee -a \"\$config_file\" > /dev/null << EOF" >> /tmp/universal-setup.sh
          echo "    location /.well-known/acme-challenge/ {" >> /tmp/universal-setup.sh
          echo "        root /var/www/html;" >> /tmp/universal-setup.sh
          echo "    }" >> /tmp/universal-setup.sh
          echo "    location / {" >> /tmp/universal-setup.sh
          echo "        return 301 https://\\\$server_name\\\$request_uri;" >> /tmp/universal-setup.sh
          echo "    }" >> /tmp/universal-setup.sh
          echo "}" >> /tmp/universal-setup.sh
          echo "server {" >> /tmp/universal-setup.sh
          echo "    listen 443 ssl http2;" >> /tmp/universal-setup.sh
          echo "    server_name \$domain;" >> /tmp/universal-setup.sh
          echo "    ssl_certificate /var/www/sertifikat/STAR25_uzswlu_uz.crt;" >> /tmp/universal-setup.sh
          echo "    ssl_certificate_key /var/www/sertifikat/STAR25_uzswlu_uz.key;" >> /tmp/universal-setup.sh
          echo "    ssl_protocols TLSv1.2 TLSv1.3;" >> /tmp/universal-setup.sh
          echo "    ssl_prefer_server_ciphers off;" >> /tmp/universal-setup.sh
          echo "    ssl_session_cache shared:SSL:10m;" >> /tmp/universal-setup.sh
          echo "    ssl_session_timeout 10m;" >> /tmp/universal-setup.sh
          echo "    ssl_session_tickets off;" >> /tmp/universal-setup.sh
          echo "    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;" >> /tmp/universal-setup.sh
          echo "    add_header X-Frame-Options \"SAMEORIGIN\" always;" >> /tmp/universal-setup.sh
          echo "    add_header X-Content-Type-Options \"nosniff\" always;" >> /tmp/universal-setup.sh
          echo "    add_header X-XSS-Protection \"1; mode=block\" always;" >> /tmp/universal-setup.sh
          echo "    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;" >> /tmp/universal-setup.sh
          echo "EOF" >> /tmp/universal-setup.sh
          echo "    fi" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    sudo tee -a \"\$config_file\" > /dev/null << EOF" >> /tmp/universal-setup.sh
          echo "    location / {" >> /tmp/universal-setup.sh
          echo "        proxy_pass http://127.0.0.1:\$port;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header Host \\\$host;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Real-IP \\\$remote_addr;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-Proto \\\$scheme;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-Host \\\$host;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-Port \\\$server_port;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-Host \\\$server_name;" >> /tmp/universal-setup.sh
          echo "        proxy_set_header X-Forwarded-Server \\\$host;" >> /tmp/universal-setup.sh
          echo "        proxy_connect_timeout 30s;" >> /tmp/universal-setup.sh
          echo "        proxy_send_timeout 30s;" >> /tmp/universal-setup.sh
          echo "        proxy_read_timeout 30s;" >> /tmp/universal-setup.sh
          echo "    }" >> /tmp/universal-setup.sh
          echo "}" >> /tmp/universal-setup.sh
          echo "EOF" >> /tmp/universal-setup.sh
          echo "    " >> /tmp/universal-setup.sh
          echo "    # Enable the site" >> /tmp/universal-setup.sh
          echo "    sudo ln -sf \"\$config_file\" \"/etc/nginx/sites-enabled/\"" >> /tmp/universal-setup.sh
          echo "    print_status \"Nginx configuration created for \$domain\"" >> /tmp/universal-setup.sh
          echo "}" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Main setup" >> /tmp/universal-setup.sh
          echo "print_info \"Setting up domains...\"" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Remove old configurations" >> /tmp/universal-setup.sh
          echo "sudo rm -f /etc/nginx/sites-enabled/api.uzswlu.uz" >> /tmp/universal-setup.sh
          echo "sudo rm -f /etc/nginx/sites-enabled/default" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Create configurations" >> /tmp/universal-setup.sh
          echo "create_nginx_config \"auth.uzswlu.uz\" \"3000\" \"true\"" >> /tmp/universal-setup.sh
          echo "create_nginx_config \"building.api.uzswlu.uz\" \"5001\" \"false\"" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "# Test and reload nginx" >> /tmp/universal-setup.sh
          echo "if sudo nginx -t; then" >> /tmp/universal-setup.sh
          echo "    sudo systemctl reload nginx" >> /tmp/universal-setup.sh
          echo "    print_status \"Nginx reloaded successfully\"" >> /tmp/universal-setup.sh
          echo "else" >> /tmp/universal-setup.sh
          echo "    print_error \"Nginx configuration is invalid\"" >> /tmp/universal-setup.sh
          echo "    exit 1" >> /tmp/universal-setup.sh
          echo "fi" >> /tmp/universal-setup.sh
          echo "" >> /tmp/universal-setup.sh
          echo "print_status \"Universal server setup completed!\"" >> /tmp/universal-setup.sh

          # Make script executable and run it
          chmod +x /tmp/universal-setup.sh
          /tmp/universal-setup.sh

      - name: 📊 Monitor Deployment Status
        run: |
          echo "📊 Monitoring deployment status..."
          
          # Simple monitoring without jq dependency
          echo "🔍 Checking deployment status..."
          
          # Check if containers are running
          if docker ps | grep -q "management-api-prod"; then
            echo "✅ Management API container is running"
          else
            echo "❌ Management API container is not running"
          fi
          
          if docker ps | grep -q "management-nginx-prod"; then
            echo "✅ Management Nginx container is running"
          else
            echo "❌ Management Nginx container is not running"
          fi
          
          # Check if ports are accessible
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"; then
            echo "✅ Management API is accessible on port 3000"
          else
            echo "❌ Management API is not accessible on port 3000"
          fi
          
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:3080 | grep -q "200"; then
            echo "✅ Management Nginx is accessible on port 3080"
          else
            echo "❌ Management Nginx is not accessible on port 3080"
          fi
          
          echo "📊 Monitoring completed"

      - name: ✅ Deployment success
        run: |
          echo "✅ =============================================="
          echo "✅ MANAGEMENT API DEPLOYED SUCCESSFULLY!"
          echo "✅ =============================================="
          echo ""
          echo "🌐 Domain: https://auth.uzswlu.uz"
          echo "🔧 Port: 3000 (HTTP), 3443 (HTTPS)"
          echo "📊 Status: Running"
          echo ""
          echo "🚀 Next steps:"
          echo "1. Test the domain: curl -I https://auth.uzswlu.uz"
          echo "2. Check logs: docker-compose -f docker-compose.prod.yml logs"
          echo "3. Apply same configuration to building project"
