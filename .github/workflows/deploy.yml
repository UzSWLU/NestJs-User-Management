name: Auto Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    name: Deploy
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 5
    steps:
      - name: Deploy
        timeout-minutes: 5
        run: |
          set -e
          cd /var/www/auth-api

          echo "üì• Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main

          echo "üîÑ Redeploying with latest code..."
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache api
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --force-recreate

          echo "‚è≥ Waiting for containers..."
          sleep 10

          echo "‚úÖ Deployed!"
          docker-compose -f docker-compose.prod.yml ps

          # Complete Server Nginx Management for auth.uzswlu.uz
          echo "üîß Complete Server Nginx Management for auth.uzswlu.uz..."
          
          # 1. Create SSL certificate directory for auth.uzswlu.uz
          echo "üìÅ Creating SSL certificate directory..."
          sudo mkdir -p /etc/nginx/ssl/auth.uzswlu.uz
          
          # 2. Copy existing SSL certificates
          echo "üîí Copying SSL certificates..."
          if [ -f "/var/www/sertifikat/STAR25_uzswlu_uz.crt" ]; then
            sudo cp /var/www/sertifikat/STAR25_uzswlu_uz.crt /etc/nginx/ssl/auth.uzswlu.uz/
            sudo cp /var/www/sertifikat/STAR25_uzswlu_uz.key /etc/nginx/ssl/auth.uzswlu.uz/
            sudo chmod 644 /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.crt
            sudo chmod 600 /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.key
            echo "‚úÖ SSL certificates copied successfully"
          else
            echo "‚ö†Ô∏è SSL certificates not found in /var/www/sertifikat/"
            echo "Creating self-signed certificates for testing..."
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.key \
              -out /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.crt \
              -subj "/C=UZ/ST=Tashkent/L=Tashkent/O=Auth API/OU=IT Department/CN=auth.uzswlu.uz"
          fi
          
          # 3. Create comprehensive Nginx configuration for auth.uzswlu.uz
          echo "üìù Creating comprehensive Nginx configuration for auth.uzswlu.uz..."
          sudo tee /etc/nginx/sites-available/auth.uzswlu.uz > /dev/null << 'EOF'
# HTTP -> HTTPS redirect
server {
    listen 80;
    server_name auth.uzswlu.uz;
    
    # Let's Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name auth.uzswlu.uz;
    
    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.crt;
    ssl_certificate_key /etc/nginx/ssl/auth.uzswlu.uz/STAR25_uzswlu_uz.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Client max body size
    client_max_body_size 20M;
    
    # Proxy to Management Nginx (port 3080)
    location / {
        proxy_pass http://127.0.0.1:3080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
    }
    
    # Health check endpoint
    location /api/health {
        proxy_pass http://127.0.0.1:3080;
        access_log off;
    }
    
    # API documentation
    location /api-docs {
        proxy_pass http://127.0.0.1:3080;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF
          
          # 4. Enable auth.uzswlu.uz site
          echo "‚úÖ Enabling auth.uzswlu.uz site..."
          sudo ln -sf /etc/nginx/sites-available/auth.uzswlu.uz /etc/nginx/sites-enabled/
          
          # 5. Test Nginx configuration
          echo "üß™ Testing Nginx configuration..."
          if sudo nginx -t; then
            echo "‚úÖ Nginx configuration is valid"
          else
            echo "‚ùå Nginx configuration has errors"
            sudo nginx -t
            exit 1
          fi
          
          # 6. Reload Nginx
          echo "üîÑ Reloading Nginx..."
          sudo nginx -s reload
          
          # 7. Verify Nginx is running
          echo "üîç Verifying Nginx status..."
          sudo systemctl status nginx --no-pager -l
          
          echo "‚úÖ Complete Server Nginx Management for auth.uzswlu.uz completed successfully!"
          echo "üåê auth.uzswlu.uz is now configured to proxy to port 3080"
