name: Auto Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    name: Deploy
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 5
    steps:
      - name: Deploy
        timeout-minutes: 5
        run: |
          set -e
          cd /var/www/auth-api

          echo "📥 Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main

          echo "🔄 Redeploying with latest code..."
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache api
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --force-recreate

          echo "⏳ Waiting for containers..."
          sleep 10

          echo "✅ Deployed!"
          docker-compose -f docker-compose.prod.yml ps

          # Auto-configure server-level Nginx for auth.uzswlu.uz
          echo "🔧 Auto-configuring server-level Nginx for auth.uzswlu.uz..."
          
          # Create server-level Nginx configuration via Docker exec
          echo "📝 Creating server-level Nginx configuration..."
          
          # Create auth.uzswlu.uz configuration
          docker exec $(docker ps -q --filter "name=nginx") bash -c 'cat > /etc/nginx/sites-available/auth.uzswlu.uz << "EOF"
# HTTP -> HTTPS redirect
server {
    listen 80;
    server_name auth.uzswlu.uz;

    # Let'\''s Encrypt validation
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # Redirect all other requests to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name auth.uzswlu.uz;

    # SSL Configuration (using existing certificates from /var/www/sertifikat)
    ssl_certificate /var/www/sertifikat/STAR25_uzswlu_uz.crt;
    ssl_certificate_key /var/www/sertifikat/STAR25_uzswlu_uz.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers '\''ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'\'';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Proxy to Management API Docker container (HTTP, not HTTPS)
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }
}
EOF'
          
          # Enable the site
          docker exec $(docker ps -q --filter "name=nginx") ln -sf /etc/nginx/sites-available/auth.uzswlu.uz /etc/nginx/sites-enabled/
          
          # Test and reload Nginx
          docker exec $(docker ps -q --filter "name=nginx") nginx -t && docker exec $(docker ps -q --filter "name=nginx") nginx -s reload
          
          echo "✅ Server-level Nginx configuration updated for auth.uzswlu.uz"
