name: Auto Deploy

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  deploy:
    name: Deploy
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 5
    # Run directly on server (not in container) to access nginx and docker
    steps:
      - name: Deploy
        timeout-minutes: 5
        run: |
          set -e
          cd /var/www/auth-api

          echo "📥 Pulling latest code..."
          git fetch origin main
          git reset --hard origin/main

          echo "🔄 Redeploying with latest code..."
          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml build --no-cache api
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d --force-recreate

          echo "⏳ Waiting for containers..."
          sleep 10

          echo "✅ Deployed!"
          docker-compose -f docker-compose.prod.yml ps

          # Run universal server setup script
          echo "🚀 Running universal server setup..."
          
          # Create universal setup script
          cat > /tmp/universal-setup.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Universal Server Setup Script"
echo "================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() { echo -e "${GREEN}✅ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️ $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ️ $1${NC}"; }

# Function to create nginx configuration
create_nginx_config() {
    local domain=$1
    local port=$2
    local ssl_enabled=$3
    local config_file="/etc/nginx/sites-available/$domain"
    
    print_info "Creating Nginx configuration for $domain..."
    
    # Remove old configuration if exists
    sudo rm -f "/etc/nginx/sites-enabled/$domain"
    
    # Create new configuration
    sudo tee "$config_file" > /dev/null << EOF
server {
    listen 80;
    server_name $domain;
EOF

    if [ "$ssl_enabled" = "true" ]; then
        sudo tee -a "$config_file" > /dev/null << EOF
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}
server {
    listen 443 ssl http2;
    server_name $domain;
    ssl_certificate /var/www/sertifikat/STAR25_uzswlu_uz.crt;
    ssl_certificate_key /var/www/sertifikat/STAR25_uzswlu_uz.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
EOF
    fi

    sudo tee -a "$config_file" > /dev/null << EOF
    location / {
        proxy_pass http://127.0.0.1:$port;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
        proxy_set_header X-Forwarded-Host \$server_name;
        proxy_set_header X-Forwarded-Server \$host;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
EOF

    # Enable the site
    sudo ln -sf "$config_file" "/etc/nginx/sites-enabled/"
    print_status "Nginx configuration created for $domain"
}

# Main setup
print_info "Setting up domains..."

# Remove old configurations
sudo rm -f /etc/nginx/sites-enabled/api.uzswlu.uz
sudo rm -f /etc/nginx/sites-enabled/default

# Create configurations
create_nginx_config "auth.uzswlu.uz" "3000" "true"
create_nginx_config "building.api.uzswlu.uz" "5001" "false"

# Test and reload nginx
if sudo nginx -t; then
    sudo systemctl reload nginx
    print_status "Nginx reloaded successfully"
else
    print_error "Nginx configuration is invalid"
    exit 1
fi

print_status "Universal server setup completed!"
EOF

          # Make script executable and run it
          chmod +x /tmp/universal-setup.sh
          /tmp/universal-setup.sh
